import pandas as pd
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from openpyxl import load_workbook
from openpyxl.styles import Border, Side
from moysklad_api import get_product_uuid, get_store_slots, get_stock_by_slot, STORE_ID
from utils import (
    find_column_index,
    find_quantity_column,
    save_workbook_with_retries,
    format_sticker_cell
)

progress: dict[str, str] = {}

def process_file(input_path: str, output_path: str, session_id: str):
    progress[session_id] = "üîÑ –°—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    df = pd.read_excel(input_path, dtype=str)
    total = len(df)
    progress[session_id] = f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {total}"

    # –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    art_col     = find_column_index(df.columns, ['–∞—Ä—Ç–∏–∫—É–ª'])
    sticker_col = find_column_index(df.columns, ['‚Ññ —Å—Ç–∏–∫–µ—Ä–∞', '–Ω–æ–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞', '—Å—Ç–∏–∫–µ—Ä', '–Ω–æ–º–µ—Ä'])
    qty_col     = find_quantity_column(df)
    if art_col is None or sticker_col is None or qty_col is None:
        progress[session_id] = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –ê—Ä—Ç–∏–∫—É–ª/‚Ññ –°—Ç–∏–∫–µ—Ä–∞/–ö–æ–ª-–≤–æ"
        return

    progress[session_id] = "üì¶ –ü–æ–ª—É—á–∞–µ–º —è—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞..."
    slots = get_store_slots(STORE_ID)
    progress[session_id] = f"‚úÖ –Ø—á–µ–µ–∫: {len(slots)}"

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª–∏
    results = [("", "", "")] * total
    with ThreadPoolExecutor(max_workers=5) as executor:
        futures = {
            executor.submit(_process_row, df.iat[i, art_col], slots): i
            for i in range(total)
        }
        done = 0
        for fut in as_completed(futures):
            idx = futures[fut]
            try:
                results[idx] = fut.result()
            except Exception:
                results[idx] = ("", "", "")
            done += 1
            progress[session_id] = f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {done}/{total}"

    # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    out_data = []
    for i, (article, name, slots_text) in enumerate(results):
        sticker = df.iat[i, sticker_col] or ""
        quantity = df.iat[i, qty_col] or ""
        out_data.append({
            '‚Ññ –°—Ç–∏–∫–µ—Ä–∞':    sticker,
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':   quantity,
            '–ê—Ä—Ç–∏–∫—É–ª':      article or "",
            '–Ø—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞': slots_text,
            '–ù–∞–∑–≤–∞–Ω–∏–µ':     name or ""
        })

    out_df = pd.DataFrame(out_data, columns=[
        '‚Ññ –°—Ç–∏–∫–µ—Ä–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ê—Ä—Ç–∏–∫—É–ª', '–Ø—á–µ–π–∫–∏ —Å–∫–ª–∞–¥–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ'
    ])
    out_df.to_excel(output_path, index=False)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–º–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
    wb = load_workbook(output_path)
    ws = wb.active
    thin = Side(border_style="thin", color="000000")
    border = Border(left=thin, right=thin, top=thin, bottom=thin)
    for row in ws.iter_rows(min_row=1,
                            max_row=ws.max_row,
                            min_col=1,
                            max_col=ws.max_column):
        for cell in row:
            cell.border = border

    for r in range(2, ws.max_row + 1):
        format_sticker_cell(ws.cell(row=r, column=1))

    save_workbook_with_retries(wb, output_path)
    progress[session_id] = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

def _process_row(article: str, slots: dict[str, str]) -> tuple[str, str, str]:
    art = str(article).strip()
    if not art:
        return "", "", ""
    uuid, name = get_product_uuid(art)
    if not uuid:
        return art, "", ""
    stock_rows = get_stock_by_slot(uuid, STORE_ID)
    parts = []
    for r in stock_rows:
        slot_id = r.get('slotId')
        qty = r.get('stock', 0)
        if slot_id and qty and qty != 0:
            parts.append(f"{slots.get(slot_id, slot_id)} - {int(qty)} —à—Ç")
    time.sleep(0.1)  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å 429 Too Many Requests
    return art, name or "", ", ".join(parts)
